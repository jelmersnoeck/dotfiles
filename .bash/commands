#!/bin/bash

# OS X's file system is case-insensitive by default, so use aliases to get
# "GET"/"HEAD"/â€¦ working. (Otherwise "HEAD" would execute "/usr/bin/head".)
[[ "$OSTYPE" =~ ^darwin ]] && for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
    alias "$method"="/usr/bin/lwp-request -m $method";
done;
unset method;

# Adds ~/.ssh/config to the ssh autocomplete. This way you can use autocomplete
# to ssh to the servers you've added via the configure-ssh-host command.
ssh-load-autocomplete()
{
    complete -W "$(awk '/^\s*Host\s*/ { sub(/^\s*Host /, ""); print; }' ~/.ssh/config)" ssh
    complete -W "$(awk '/^\s*Host\s*/ { sub(/^\s*Host /, ""); print; }' ~/.ssh/config)" sshd
}

# Start the autocomplete when our bash starts
ssh-load-autocomplete

# Source all shell files in a given directory
source_dir() {
  for filename in "$1"/*.sh; do
    source "$filename"
  done
}

# Show the current active Git branch, if any.
function git-show-branch {
    branch="$(git symbolic-ref -q HEAD 2>/dev/null)";
    ret=$?;
    case $ret in
        0) echo "${branch##refs/heads/}";;
        1) echo 'no branch';;
        128) echo -n;;
        *) echo "[unknown git exit code: $ret]";;
    esac;
    return $ret;
}

# Create a remote branch linked to our local branch. This is an easy setup so
# we don't have to do "git push -u origin <branch>" anymore.
function git-create-remote {
    gpo -u "$(git-show-branch)"
}

# git-clean-remote goes through all the branches that are linked with a remote
# and finds the local version. It then deletes it when
function git-clean-remote {
    git branch --merged master --no-color | grep -v '^* master$' | xargs git branch -d
}

# Show what a given command really is. It is a combination of "type", "file"
# and "ls". Unlike "which", it does not only take $PATH into account. This
# means it works for aliases and hashes, too. (The name "whatis" was taken,
# and I did not want to overwrite "which", hence "wtfis".)
# The return value is the result of "type" for the last command specified.
function wtfis {
    local cmd type i=1 ret=0;
    if [ $# -eq 0 ]; then
        # Use "fc" to get the last command, and use that when no command
        # was given as a parameter to "wtfis".
        set -- $(fc -nl -1);
        while [ $# -gt 0 -a '(' "sudo" = "$1" -o "-" = "${1:0:1}" ')' ]; do
            # Ignore "sudo" and options ("-x" or "--bla").
            shift;
        done;
        # Replace the positional parameter array with the last command name.
        set -- "$1";
    fi;
    for cmd; do
        type="$(type "$cmd")";
        ret=$?;
        if [ $ret -eq 0 ]; then
            # Try to get the physical path. This works for hashes and
            # "normal" binaries.
            local path="$(type -p "$cmd")";
            if [ -z "$path" ]; then
                # Show the output from "type" without ANSI escapes.
                echo "${type//$'\e'/\\033}";

                case "$(command -v "$cmd")" in
                    'alias')
                        local alias_="$(alias "$cmd")";
                        # The output looks like "alias foo='bar'"; so
                        # strip everything except the body.
                        alias_="${alias_#*\'}";
                        alias_="${alias_%\'}";
                        # Use "read" to process escapes. E.g. 'test\ it'
                        # will # be read as 'test it'. This allows for
                        # spaces inside command names.
                        read -d ' ' alias_ <<< "$alias_";
                        # Recurse and indent the output.
                        # TODO: prevent infinite recursion
                        wtfis "$alias_" 2>&2 | sed 's/^/  /';
                        ;;
                    'keyword' | 'builtin')
                        # Get the one-line description from the built-in
                        # help, if available. Note that this does not
                        # guarantee anything useful, though. Look at the
                        # output for "help set", for instance.
                        help "$cmd" 2> /dev/null | {
                            local buf line;
                            read -r line;
                            while read -r line; do
                                buf="$buf${line/.  */.} ";
                                if [[ "$buf" =~ \.\ $ ]]; then
                                    echo "$buf";
                                    break;
                                fi;
                            done;
                        };
                        ;;
                esac;
            else
                # For physical paths, get some more info.
                # First, get the one-line description from the man page.
                # ("col -b" gets rid of the backspaces used by OS X's man
                # to get a "bold" font.)
                (COLUMNS=10000 man "$(basename "$path")" 2>/dev/null) | col -b | \
                awk '/^NAME$/,/^$/' | {
                    local buf line;
                    read -r line;
                    while read -r line; do
                        buf="$buf${line/.  */.} ";
                        if [[ "$buf" =~ \.\ $ ]]; then
                            echo "$buf";
                            buf='';
                            break;
                        fi;
                    done;
                    [ -n "$buf" ] && echo "$buf";
                }

                # Get the absolute path for the binary.
                local full_path="$(
                    cd "$(dirname "$path")" \
                        && echo "$PWD/$(basename "$path")" \
                        || echo "$path"
                )";

                # Then, combine the output of "type" and "file".
                local fileinfo="$(file "$full_path")";
                echo "${type%$path}${fileinfo}";

                # Finally, show it using "ls" and highlight the path.
                # If the path is a symlink, keep going until we find the
                # final destination. (This assumes there are no circular
                # references.)
                local paths=("$path") target_path="$path";
                while [ -L "$target_path" ]; do
                    target_path="$(readlink "$target_path")";
                    paths+=("$(
                        # Do some relative path resolving for systems
                        # without readlink --canonicalize.
                        cd "$(dirname "$path")";
                        cd "$(dirname "$target_path")";
                        echo "$PWD/$(basename "$target_path")"
                    )");
                done;
                local ls="$(command ls -fdalF "${paths[@]}")";
                echo "${ls/$path/$'\e[7m'${path}$'\e[27m'}";
            fi;
        fi;

        # Separate the output for all but the last command with blank lines.
        [ $i -lt $# ] && echo;
        let i++;
    done;
    return $ret;
}

# Shorten git command, default to git status by default.
function g {
  if [[ $# > 0 ]]; then
    git $@
  else
    git st
  fi
}

# Shorten git checkout. I use to do gco instead of gco . a lot. Fix that.
function gco {
  if [[ $# > 0 ]]; then
    git checkout $@
  else
    git checkout .
  fi
}

# Apply a git stash if a specific version is given or apply the latest one if
# no arguments are given.
function gsta {
  if [[ $# > 0 ]]; then
      git stash apply stash@{$@}
  else
      git stash apply
  fi
}

# Drop a specific git stash if an argument is given or drop the latest one if no
# argument is given.
function gstd {
  if [[ $# > 0 ]]; then
      git stash drop stash@{$@}
  else
      git stash drop stash@{0}
  fi
}

# Show my top used commands history
function smh {
    cat ~/.bash_history | awk '{CMD[$1]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n15
}

# This will set up a new go project according to my project structure I use on
# my machine.
# It creates a new project in your GOPATH under your configured github user with
# the given project name. It will then symlink it to the ~/Project directory
# under the specified name and set up git.
# Afterwards, it will start a tmux session with all the desired panes open.
function new-go-project {
    name=$@
    mkdir -p $GOPATH/src/github.com/$(git config github.user)/$name
    ln -sf $GOPATH/src/github.com/$(git config github.user)/$name ~/Projects/$name
    cd ~/Projects/$name
    git init
    cd ~/Projects
    dev $name
}

# Get a git diff on $1 (master..feature-branch) and exclude folder $2 from the
# diff.
gde() {
    git diff $1 --name-only | grep -v "^$2" | xargs git diff $1 --
}

# Notification script. This will wrap a script inside the function and use OS X
# notification center to let me know when the script has ran. This is useful
# for long running scripts that you want to run in the background but want to be
# informed of when it's done.
notify_script() {
    "${@:2}"
    osascript -e "display alert \"Script done running!\" message \"$1\""
}

# Curtosy of @jackbot
# List all AWS EC2 instances that match a given name.
aws-list-instances() {
    aws ec2 describe-instances --filters "Name=tag:Name,Values=*$1*" --query 'Reservations[].Instances[].[PrivateIpAddress,InstanceId,Tags[?Key==`Name`].Value[]]' --output text
}

# `gt` runs the tests for all subpackages of your main package except for
# example and vendored packages.
function gt {
    go test -race -bench . -benchmem -run . -v $(go list ./... | grep -v '\/vendor\/\|\/examples\/')
}

# `gtp` runs the tests for a specific package
function gtp {
    go test -race -bench=. -benchmem -run . -v $1
}

# `gtr` runs all the tests that match a specific regex for all the subpackages.
function gtr {
    go test -race -bench . -benchmem -run $1 -v $(go list ./... | grep -v '\/vendor\/\|\/examples\/')
}

# sync-disks will sync hard drives with rsync, this is used for backing up one
# hard drive to another with the same naming convention.
function sync-disks {
    rsync -avr --times --delete --exclude=/\.Spotlight/ --exclude=/\.Trashes/ /Volumes/JS-$1/ /Volumes/JS-$1-Backup/
}

# sync-disks will sync hard drives with rsync, this is used for backing up one
# hard drive to another with the same naming convention.
function dry-sync-disks {
    rsync --dry-run -avr --times --delete --exclude=/\.Spotlight/ --exclude=/\.Trashes/ /Volumes/JS-$1/ /Volumes/JS-$1-Backup/
}

# this will import the gpg keys from keybase and set them up in our gpg agent
function import-gpg {
    keybase pgp export -q $1 | gpg --import
    keybase pgp export -q $1 --secret | gpg --allow-secret-key-import --import
}

# when an argument is given to dps it will grep for that argument in the
# `docker ps` list, if none is given it will show all results.
function dps {
  if [[ $# > 0 ]]; then
      docker ps | grep $@
  else
      docker ps
  fi
}

# when an argument is given to dpsa it will grep for that argument in the
# `docker ps -a` list, if none is given it will show all results.
function dpsa {
  if [[ $# > 0 ]]; then
      docker ps -a | grep $@
  else
      docker ps -a
  fi
}

# deb executes bash interactively on the given container id
function deb {
    docker exec -it $1 bash
}

# drb runs bash interactivly on the given container image
function drb {
    docker run --rm -it $1 bash
}

# dips is the representation of `docker ps` but it adds a column of IP addresses
function dips {
    docker ps | while read line; do
        if `echo $line | grep -q 'CONTAINER ID'`; then
            echo -e "IP ADDRESS\t$line"
        else
            CID=$(echo $line | awk '{print $1}');
            IP=$(docker inspect -f "{{ .NetworkSettings.IPAddress }}" $CID);
            printf "${IP}\t${line}\n"
        fi
    done;
}

# make_targets shows all targets for a make file
function make_targets {
    make -qp | awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);for(i in A)print A[i]}' | grep -v Makefile
}

##################################
####### Kubernetes helpers #######
##################################

# kcdr will force reload a deployment by re-annotating the metadata with the
# current timestamp.
function kcdr {
    kubectl patch deployment $@ -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
}

# kcdra will force reload all deployments in a specific namespace.
function kcdra {
    namespace=$1
    if [[ $namespace == "" ]]; then
        namespace="default"
    fi

    k get deploy -n $namespace | grep -v NAME | cut -d' ' -f1 | xargs -I {} kubectl patch deployment {} -n $namespace -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
}

function gcom {
    if [[ $(git branch | grep mainline$) ]]; then
        git checkout mainline
    elif [[ $(git branch | grep main$) ]]; then
        git checkout main
    else
        git checkout master
    fi
}

function hp {
    if [[ $(git branch | grep main$) ]]; then
        gh pr create --fill -a jelmersnoeck -B main $@
    else
        gh pr create --fill -a jelmersnoeck -B master $@
    fi
}

# wifi-passwords pulls out the password for the given wifi network in plain text
# from the keychain.
function wifi-password {
    security find-generic-password -wa $1
}

function golink {
    for f in ~/.goversions/bin/*; do
        unlink $f
    done
    unlink ~/go/src
    unlink ~/go/pkg
    unlink ~/.goversions/root

    for f in ~/.goversions/go$1/bin/*; do
        ln -sf $f ~/.goversions/bin/
    done

    ln -sf ~/.goversions/go$1 ~/.goversions/root
    ln -sf ~/.goversions/root/$1/src ~/go/src
    ln -sf ~/.goversions/root/$1/pkg ~/go/pkg
}
